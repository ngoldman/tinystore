{"name":"TinyStore","tagline":"tiny web storage wrapper","body":"# TinyStore\r\n\r\nA tiny web storage wrapper. Works with localStorage, sessionStorage, and plain objects.\r\n\r\nUseful for interacting with a persistent namespaced object store within localStorage or sessionStorage without messing with anything else that might be there (like on *.github.io).\r\n\r\nSimilar in style to [store.js](https://github.com/marcuswestin/store.js/) but for a slightly different use case (and far less ambitious).\r\n\r\n## API\r\n\r\n### `new TinyStore(name, optionalStore)`\r\n\r\nThe constructor takes a string as a name for the object to store in localStorage.\r\n\r\n```js\r\nvar store = new TinyStore('memories')\r\n```\r\n\r\nOptionally, an alternative storage mechanism can be specified. localStorage, sessionStorage, and plain objects are supported. Default is localStorage.\r\n\r\n```js\r\nvar localStore = new TinyStore('local', localStorage)\r\nvar sessionStore = new TinyStore('session', sessionStorage)\r\n\r\nvar obj = {}\r\nvar objStore = new TinyStore('obj', obj)\r\n```\r\n\r\n### `.enabled`\r\n\r\n`.enabled` is a boolean flag to show if the specified store is available or not.\r\n\r\n```js\r\nstore.enabled\r\n// -> true (you've got localStorage/sessionStorage/a plain object!)\r\n// -> false (something went horribly wrong!)\r\n```\r\n\r\n### `.set(key, value)`\r\n\r\n`.set()` takes a key and a value and saves the pair to localStorage. The key should be a string, and the value can be any standard javascript thing (string, number, array, object).\r\n\r\n```js\r\nstore.set('saturday', 'karaoke')\r\n// -> \"karaoke\"\r\n\r\nstore.set('sunday', ['hangover', 'NaptimePDX'])\r\n// -> [\"hangover\", \"NaptimePDX\"]\r\n\r\nstore.set('monday', { 'work': ['meetings', 'coding'] })\r\n// -> { \"work\": [\"meetings\", \"coding\"] }\r\n```\r\n\r\n### `.get(key)`\r\n\r\n`.get()` takes a key string and returns the value if it exists.\r\n\r\n```js\r\nstore.get('saturday')\r\n// -> \"karaoke\"\r\n\r\nstore.get('friday')\r\n// -> undefined\r\n```\r\n\r\n### `.session`\r\n\r\n`.session` is a plain old JS object. It's what gets parsed out of localStorage and stringified back in.\r\n\r\n```js\r\nstore.session\r\n// -> { \"saturday\": \"karaoke\", \"sunday\": [\"hangover\", \"NaptimePDX\"], \"monday\": { \"work\": [\"meetings\", \"coding\"] } }\r\n\r\n// you can manipulate the session object directly if that's your jam\r\n// keep in mind you'll have to manually `.save()` when you do this\r\nstore.session.whatever = { 'doge': 'sweater vests' }\r\n```\r\n\r\n### `.save()`\r\n\r\n`.save()` will persist the `session` object (`.set()` does this automatically).\r\n\r\n```js\r\nstore.save()\r\n// -> { \"saturday\": \"karaoke\", \"sunday\": [\"hangover\", \"NaptimePDX\"], \"monday\": { \"work\": [\"meetings\", \"coding\"] }, \"whatever\": { \"doge\": \"sweater vests\" } }\r\n```\r\n\r\n### `.remove(key)`\r\n\r\n`.remove()` will remove the key passed as a parameter from the `.session` object and save the change to localStorage. It will also return the value of the key you removed in case you want to do something fancy.\r\n\r\n```js\r\nstore.remove('whatever')\r\n// -> { 'doge': 'sweater vests' }\r\n```\r\n\r\n### `.clear()`\r\n\r\n`.clear()` will reset the session object and remove the item from localStorage if localStorage is enabled.\r\n\r\n```js\r\nstore.clear()\r\n// -> {}\r\n```\r\n\r\n## Tests\r\n\r\n```bash\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Minification\r\n\r\n```bash\r\nnpm install\r\nnpm run minify\r\n```\r\n\r\n## License\r\n\r\nISC\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}